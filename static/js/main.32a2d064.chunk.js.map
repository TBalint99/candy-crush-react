{"version":3,"sources":["components/ScoreBoard.js","images/blue-candy.png","images/green-candy.png","images/orange-candy.png","images/purple-candy.png","images/red-candy.png","images/yellow-candy.png","images/blank.png","App.js","index.js"],"names":["ScoreBoard","score","className","candyColor","blueCandy","greenCandy","orangeCandy","purpleCandy","yellowCandy","redCandy","App","useState","currentColorArrangement","setCurrentColorArrangement","squareBeingDragged","setSquareBeingDragged","squareBeingReplaced","setSquareBeingReplaced","scoreDisplay","setScoreDisplay","checkForColumnOfThree","i","columnOfThree","width","decidedColor","isBlank","blank","every","square","forEach","checkForRowOfThree","rowOfThree","includes","checkForColumnOfFour","columnOfFour","checkForRowOfFour","rowOfFour","moveIntoSquareBelow","randomNumber","Math","floor","random","length","console","log","dragStart","e","target","dragDrop","dragEnd","squareBeingDraggedId","parseInt","getAttribute","squareBeingReplacedId","validMove","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","useEffect","randomColorArrangement","randomColor","push","createBoard","timer","setInterval","clearInterval","map","index","src","alt","draggable","onDragStart","onDragOver","preventDefault","onDragEnter","onDragLeave","onDrop","onDragEnd","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32a2d064.chunk.js","sourcesContent":["const ScoreBoard = ({ score }) => {\r\n    return (\r\n        <div className=\"score-board\">\r\n            <h2>{ score }</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBoard","export default __webpack_public_path__ + \"static/media/blue-candy.73120c15.png\";","export default __webpack_public_path__ + \"static/media/green-candy.599f7016.png\";","export default __webpack_public_path__ + \"static/media/orange-candy.f106b2cd.png\";","export default __webpack_public_path__ + \"static/media/purple-candy.ae25b8a5.png\";","export default __webpack_public_path__ + \"static/media/red-candy.3658b37c.png\";","export default __webpack_public_path__ + \"static/media/yellow-candy.a3d87a9b.png\";","export default __webpack_public_path__ + \"static/media/blank.fbcb9179.png\";","import React, { useEffect, useState } from 'react'\nimport ScoreBoard from './components/ScoreBoard'\nimport blueCandy from './images/blue-candy.png'\nimport greenCandy from './images/green-candy.png'\nimport orangeCandy from './images/orange-candy.png'\nimport purpleCandy from './images/purple-candy.png'\nimport redCandy from './images/red-candy.png'\nimport yellowCandy from './images/yellow-candy.png'\nimport blank from './images/blank.png'\n\n\n\nconst width = 8\nconst candyColor = [\n  blueCandy,\n  greenCandy,\n  orangeCandy,\n  purpleCandy,\n  yellowCandy,\n  redCandy\n]\n\nconst App = () => {\n\n  const [currentColorArrangement, setCurrentColorArrangement] = useState([])\n  const [squareBeingDragged, setSquareBeingDragged] = useState(null)\n  const [squareBeingReplaced, setSquareBeingReplaced] = useState(null)\n  const [scoreDisplay, setScoreDisplay] = useState(0)\n\n  //if there is match of three candies (columns and rows)\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i <= 47; i++) {\n      const columnOfThree = [i, i + width, i + width * 2]\n\n      const decidedColor = currentColorArrangement[i]\n\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank) ) {\n        setScoreDisplay((score) => score + 3)\n        columnOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfThree = [i, i + 1, i + 2]\n\n      const decidedColor = currentColorArrangement[i]\n\n      const notValid = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( rowOfThree.every(square => currentColorArrangement[square] === decidedColor && !isBlank) ) {\n        setScoreDisplay((score) => score + 3)\n        rowOfThree.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  //if there is match of four candies (columns and rows)\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i <= 39; i++) {\n      const columnOfFour = [i, i + width, i + width * 2, i + width * 3]\n\n      const decidedColor = currentColorArrangement[i]\n\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( columnOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank) ) {\n        setScoreDisplay((score) => score + 4)\n        columnOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < 64; i++) {\n      const rowOfFour = [i, i + 1, i + 2, i + 3]\n\n      const decidedColor = currentColorArrangement[i]\n\n      const notValid = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55, 62, 63, 64]\n\n      if (notValid.includes(i)) continue\n\n      const isBlank = currentColorArrangement[i] === blank\n\n      if ( rowOfFour.every(square => currentColorArrangement[square] === decidedColor && !isBlank) ) {\n        setScoreDisplay((score) => score + 4)\n        rowOfFour.forEach(square => currentColorArrangement[square] = blank)\n        return true\n      }\n    }\n  }\n\n  //this will moves the candies down if there is an empty space\n  const moveIntoSquareBelow = () => {\n    for (let i = 0; i < 55; i++) {\n\n      const firstRow = [0, 1, 2, 3, 4, 5, 6, 7]\n      const isFirstRow = firstRow.includes(i)\n\n      if (isFirstRow && currentColorArrangement[i] === blank) {\n        let randomNumber = Math.floor(Math.random() * candyColor.length)\n        currentColorArrangement[i] = candyColor[randomNumber]\n      }\n      \n      if ((currentColorArrangement[i+ width]) === blank) {\n        currentColorArrangement[i+ width] = currentColorArrangement[i]\n        currentColorArrangement[i] = blank\n      }\n    }\n  }\n\n  console.log(scoreDisplay)\n\n  //handling drag & drop events\n  const dragStart = (e) => {\n    setSquareBeingDragged(e.target)\n  }\n\n  const dragDrop = (e) => {\n    setSquareBeingReplaced(e.target)\n  }\n\n  const dragEnd = (e) => {\n\n    const squareBeingDraggedId = parseInt(squareBeingDragged.getAttribute('data-id'))\n    const squareBeingReplacedId = parseInt(squareBeingReplaced.getAttribute('data-id'))\n\n    currentColorArrangement[squareBeingReplacedId] = squareBeingDragged.getAttribute('src')\n    currentColorArrangement[squareBeingDraggedId] = squareBeingReplaced.getAttribute('src')\n\n    console.log('squareBeingDraggedId', squareBeingDraggedId)\n    console.log('squareBeingReplacedId', squareBeingReplacedId)\n\n    const validMoves = [\n      squareBeingDraggedId - 1,\n      squareBeingDraggedId - width,\n      squareBeingDraggedId + 1,\n      squareBeingDraggedId + width\n    ]\n\n    const validMove = validMoves.includes(squareBeingReplacedId)\n\n    const isAColumnOfFour = checkForColumnOfFour()\n    const isARowOfFour = checkForRowOfFour()\n    const isAColumnOfThree = checkForColumnOfThree()\n    const isARowOfThree = checkForRowOfThree()\n\n    if (squareBeingReplacedId &\n        validMove &&\n        ( isARowOfThree || isARowOfFour || isAColumnOfThree || isAColumnOfFour )) {\n          setSquareBeingDragged(null)\n          setSquareBeingReplaced(null)\n    } else {\n      currentColorArrangement[squareBeingReplacedId] = squareBeingReplaced.getAttribute('src')\n      currentColorArrangement[squareBeingDraggedId] = squareBeingDragged.getAttribute('src')\n      setCurrentColorArrangement([...currentColorArrangement])\n    }\n  }\n\n  const createBoard = () => {\n    const randomColorArrangement = []\n\n    for (let i = 0; i < width * width; i++) {\n      const randomColor = candyColor[Math.floor(Math.random() * candyColor.length)]\n      randomColorArrangement.push(randomColor)\n    }\n\n    setCurrentColorArrangement(randomColorArrangement)\n  }\n\n  //for creating a gameboard\n  useEffect(() => {\n    createBoard()\n  }, [])\n\n  //for checking matches between candies\n  useEffect(() => {\n\n    const timer = setInterval(() => {\n      //order matters in this case!\n      checkForColumnOfFour()\n      checkForRowOfFour()\n      checkForColumnOfThree()\n      checkForRowOfThree()\n      moveIntoSquareBelow()\n      setCurrentColorArrangement([...currentColorArrangement])\n    }, 100)\n\n    return () => clearInterval(timer)\n\n  }, [checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveIntoSquareBelow, currentColorArrangement])\n\n  return (\n    <div className=\"app\">\n      <div className=\"game\">\n        {currentColorArrangement.map((candyColor, index) => (\n          <img \n            key={index}\n            src={candyColor}\n            alt={candyColor}\n            data-id={index}\n            //handling drag & drop\n            draggable={true}\n            onDragStart={dragStart}\n            onDragOver={(e) => e.preventDefault()}\n            onDragEnter={(e) => e.preventDefault()}\n            onDragLeave={(e) => e.preventDefault()}\n            onDrop={dragDrop}\n            onDragEnd={dragEnd}\n          />\n        ))}\n      </div>\n      <ScoreBoard score={scoreDisplay}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}